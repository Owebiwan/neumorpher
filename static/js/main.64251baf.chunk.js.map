{"version":3,"sources":["Calculator.js","components/Buttons.js","components/Formula.js","components/Output.js","serviceWorker.js","index.js"],"names":["isOperator","endsWithOperator","endsWithNegativeSign","Calculator","props","state","currentVal","prevVal","formula","currentSign","lastClicked","maxDigitWarning","bind","handleOperators","handleEvaluate","initialize","handleDecimal","handleNumbers","this","setState","setTimeout","includes","expression","test","slice","replace","answer","Math","round","eval","toString","evaluated","e","value","target","length","match","className","currentValue","decimal","evaluate","numbers","operators","href","React","Component","Buttons","id","onClick","Formula","Output","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.64251baf.chunk.js","sourcesContent":["import React from \"react\";\nimport Buttons from \"./components/Buttons\";\nimport Formula from \"./components/Formula\";\nimport Output from \"./components/Output\";\nimport \"./App.scss\";\n\nconst isOperator = /[x/+‑]/,\n  endsWithOperator = /[x+‑/]$/,\n  endsWithNegativeSign = /[x/+]‑$/;\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentVal: \"0\",\n      prevVal: \"0\",\n      formula: \"\",\n      currentSign: \"pos\",\n      lastClicked: \"\",\n    };\n    this.maxDigitWarning = this.maxDigitWarning.bind(this);\n    this.handleOperators = this.handleOperators.bind(this);\n    this.handleEvaluate = this.handleEvaluate.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.handleDecimal = this.handleDecimal.bind(this);\n    this.handleNumbers = this.handleNumbers.bind(this);\n  }\n\n  maxDigitWarning() {\n    this.setState({\n      currentVal: \"Digit Limit Met\",\n      prevVal: this.state.currentVal,\n    });\n    setTimeout(() => this.setState({ currentVal: this.state.prevVal }), 1000);\n  }\n\n  handleEvaluate() {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      let expression = this.state.formula;\n      while (endsWithOperator.test(expression)) {\n        expression = expression.slice(0, -1);\n      }\n      expression = expression.replace(/x/g, \"*\").replace(/‑/g, \"-\");\n      let answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\n      this.setState({\n        currentVal: answer.toString(),\n        formula:\n          expression.replace(/\\*/g, \"⋅\").replace(/-/g, \"‑\") + \"=\" + answer,\n        prevVal: answer,\n        evaluated: true,\n      });\n    }\n  }\n\n  handleOperators(e) {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      const value = e.target.value;\n      const { formula, prevVal, evaluated } = this.state;\n      this.setState({ currentVal: value, evaluated: false });\n      if (evaluated) {\n        this.setState({ formula: prevVal + value });\n      } else if (!endsWithOperator.test(formula)) {\n        this.setState({\n          prevVal: formula,\n          formula: formula + value,\n        });\n      } else if (!endsWithNegativeSign.test(formula)) {\n        this.setState({\n          formula:\n            (endsWithNegativeSign.test(formula + value) ? formula : prevVal) +\n            value,\n        });\n      } else if (value !== \"‑\") {\n        this.setState({\n          formula: prevVal + value,\n        });\n      }\n    }\n  }\n\n  handleNumbers(e) {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      const { currentVal, formula, evaluated } = this.state;\n      const value = e.target.value;\n      this.setState({ evaluated: false });\n      if (currentVal.length > 21) {\n        this.maxDigitWarning();\n      } else if (evaluated) {\n        this.setState({\n          currentVal: value,\n          formula: value !== \"0\" ? value : \"\",\n        });\n      } else {\n        this.setState({\n          currentVal:\n            currentVal === \"0\" || isOperator.test(currentVal)\n              ? value\n              : currentVal + value,\n          formula:\n            currentVal === \"0\" && value === \"0\"\n              ? formula === \"\"\n                ? value\n                : formula\n              : /([^.0-9]0|^0)$/.test(formula)\n              ? formula.slice(0, -1) + value\n              : formula + value,\n        });\n      }\n    }\n  }\n\n  handleDecimal() {\n    if (this.state.evaluated === true) {\n      this.setState({\n        currentVal: \"0.\",\n        formula: \"0.\",\n        evaluated: false,\n      });\n    } else if (\n      !this.state.currentVal.includes(\".\") &&\n      !this.state.currentVal.includes(\"Limit\")\n    ) {\n      this.setState({ evaluated: false });\n      if (this.state.currentVal.length > 21) {\n        this.maxDigitWarning();\n      } else if (\n        endsWithOperator.test(this.state.formula) ||\n        (this.state.currentVal === \"0\" && this.state.formula === \"\")\n      ) {\n        this.setState({\n          currentVal: \"0.\",\n          formula: this.state.formula + \"0.\",\n        });\n      } else {\n        this.setState({\n          currentVal: this.state.formula.match(/(-?\\d+\\.?\\d*)$/)[0] + \".\",\n          formula: this.state.formula + \".\",\n        });\n      }\n    }\n  }\n\n  initialize() {\n    this.setState({\n      currentVal: \"0\",\n      prevVal: \"0\",\n      formula: \"\",\n      currentSign: \"pos\",\n      lastClicked: \"\",\n      evaluated: false,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"calculator\">\n          <div className=\"display\">\n            <Formula formula={this.state.formula.replace(/x/g, \"⋅\")} />\n            <Output currentValue={this.state.currentVal} />\n          </div>\n          <div className=\"input\">\n            <Buttons\n              decimal={this.handleDecimal}\n              evaluate={this.handleEvaluate}\n              initialize={this.initialize}\n              numbers={this.handleNumbers}\n              operators={this.handleOperators}\n            />\n          </div>\n        </div>\n        <div className=\"footer\">\n          <a\n            className=\"contact\"\n            target=\"blank\"\n            href=\"https://linkedin.com/in/godwin-obamina\"\n          >\n            <button>\n              by Beewan <i className=\"fa fa-linkedin-square\"></i>\n            </button>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\r\n\r\nexport default class Buttons extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"keys\">\r\n        <button\r\n          className=\"jumbo\"\r\n          id=\"clear\"\r\n          onClick={this.props.initialize}\r\n          value=\"AC\"\r\n        >\r\n          AC\r\n        </button>\r\n        <button\r\n          id=\"divide\"\r\n          onClick={this.props.operators}\r\n          className=\"operator\"\r\n          value=\"/\"\r\n        >\r\n          /\r\n        </button>\r\n        <button\r\n          id=\"multiply\"\r\n          onClick={this.props.operators}\r\n          className=\"operator\"\r\n          value=\"x\"\r\n        >\r\n          x\r\n        </button>\r\n        <button\r\n          id=\"seven\"\r\n          onClick={this.props.numbers}\r\n          value=\"7\"\r\n          className=\"row-one\"\r\n        >\r\n          7\r\n        </button>\r\n        <button\r\n          id=\"eight\"\r\n          onClick={this.props.numbers}\r\n          value=\"8\"\r\n          className=\"row-one\"\r\n        >\r\n          8\r\n        </button>\r\n        <button\r\n          id=\"nine\"\r\n          onClick={this.props.numbers}\r\n          value=\"9\"\r\n          className=\"row-one\"\r\n        >\r\n          9\r\n        </button>\r\n        <button\r\n          id=\"subtract\"\r\n          onClick={this.props.operators}\r\n          className=\"operator\"\r\n          value=\"‑\"\r\n        >\r\n          -\r\n        </button>\r\n        <button\r\n          id=\"four\"\r\n          onClick={this.props.numbers}\r\n          value=\"4\"\r\n          className=\"row-two\"\r\n        >\r\n          4\r\n        </button>\r\n        <button\r\n          id=\"five\"\r\n          onClick={this.props.numbers}\r\n          value=\"5\"\r\n          className=\"row-two\"\r\n        >\r\n          5\r\n        </button>\r\n        <button\r\n          id=\"six\"\r\n          onClick={this.props.numbers}\r\n          value=\"6\"\r\n          className=\"row-two\"\r\n        >\r\n          6\r\n        </button>\r\n        <button\r\n          id=\"add\"\r\n          onClick={this.props.operators}\r\n          className=\"operator\"\r\n          value=\"+\"\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          id=\"one\"\r\n          onClick={this.props.numbers}\r\n          value=\"1\"\r\n          className=\"row-three\"\r\n        >\r\n          1\r\n        </button>\r\n        <button\r\n          id=\"two\"\r\n          onClick={this.props.numbers}\r\n          value=\"2\"\r\n          className=\"row-three\"\r\n        >\r\n          2\r\n        </button>\r\n        <button\r\n          id=\"three\"\r\n          onClick={this.props.numbers}\r\n          value=\"3\"\r\n          className=\"row-three\"\r\n        >\r\n          3\r\n        </button>\r\n        <button\r\n          className=\"jumbo\"\r\n          id=\"zero\"\r\n          onClick={this.props.numbers}\r\n          value=\"0\"\r\n        >\r\n          0\r\n        </button>\r\n        <button id=\"decimal\" onClick={this.props.decimal} value=\".\">\r\n          .\r\n        </button>\r\n        <button id=\"equals\" onClick={this.props.evaluate} value=\"=\">\r\n          =\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Formula extends React.Component {\r\n  render() {\r\n    return <div className=\"formulaScreen\">{this.props.formula}</div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Output extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"outputScreen\" id=\"display\">\r\n        {this.props.currentValue}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Calculator from \"./Calculator\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}